{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8080/api\",\n  // Spring Boot 서버 URL\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 요청 인터셉터 설정\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// 응답 인터셉터 설정\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  if (error.response && error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem(\"refreshToken\");\n      const response = await axios.post(\"http://localhost:8080/api/users/refresh\", null, {\n        headers: {\n          Authorization: `Bearer ${refreshToken}`\n        }\n      });\n      const newAccessToken = response.data.body.accessToken;\n      localStorage.setItem(\"token\", newAccessToken);\n      originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n      return api(originalRequest);\n    } catch (err) {\n      console.error(\"Refresh token expired or invalid\");\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"refreshToken\");\n      window.location.href = \"/login\"; // 로그인 페이지로 리디렉션\n      return Promise.reject(err);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","newAccessToken","data","body","accessToken","setItem","err","console","removeItem","window","location","href"],"sources":["C:/Users/minjae/Documents/GitHub/fashion-web-service-1/FashionNavFront/React/src/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:8080/api\",// Spring Boot 서버 URL\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    },\r\n});\r\n\r\n// 요청 인터셉터 설정\r\napi.interceptors.request.use(\r\n    (config) => {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (token) {\r\n            config.headers.Authorization = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n);\r\n\r\n// 응답 인터셉터 설정\r\napi.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n        if (error.response && error.response.status === 401 && !originalRequest._retry) {\r\n            originalRequest._retry = true;\r\n            try {\r\n                const refreshToken = localStorage.getItem(\"refreshToken\");\r\n                const response = await axios.post(\"http://localhost:8080/api/users/refresh\", null, {\r\n                    headers: { Authorization: `Bearer ${refreshToken}` },\r\n                });\r\n                const newAccessToken = response.data.body.accessToken;\r\n                localStorage.setItem(\"token\", newAccessToken);\r\n                originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\r\n                return api(originalRequest);\r\n            } catch (err) {\r\n                console.error(\"Refresh token expired or invalid\");\r\n                localStorage.removeItem(\"token\");\r\n                localStorage.removeItem(\"refreshToken\");\r\n                window.location.href = \"/login\"; // 로그인 페이지로 리디렉션\r\n                return Promise.reject(err);\r\n            }\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE,2BAA2B;EAAC;EACrCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACvBC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACnC,CAAC;;AAED;AACAZ,GAAG,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CACxBS,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;EACb,MAAMI,eAAe,GAAGJ,KAAK,CAACL,MAAM;EACpC,IAAIK,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC5EF,eAAe,CAACE,MAAM,GAAG,IAAI;IAC7B,IAAI;MACA,MAAMC,YAAY,GAAGV,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,MAAMK,QAAQ,GAAG,MAAMhB,KAAK,CAACqB,IAAI,CAAC,yCAAyC,EAAE,IAAI,EAAE;QAC/EjB,OAAO,EAAE;UAAEQ,aAAa,EAAE,UAAUQ,YAAY;QAAG;MACvD,CAAC,CAAC;MACF,MAAME,cAAc,GAAGN,QAAQ,CAACO,IAAI,CAACC,IAAI,CAACC,WAAW;MACrDf,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAEJ,cAAc,CAAC;MAC7CL,eAAe,CAACb,OAAO,CAACQ,aAAa,GAAG,UAAUU,cAAc,EAAE;MAClE,OAAOrB,GAAG,CAACgB,eAAe,CAAC;IAC/B,CAAC,CAAC,OAAOU,GAAG,EAAE;MACVC,OAAO,CAACf,KAAK,CAAC,kCAAkC,CAAC;MACjDH,YAAY,CAACmB,UAAU,CAAC,OAAO,CAAC;MAChCnB,YAAY,CAACmB,UAAU,CAAC,cAAc,CAAC;MACvCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;MACjC,OAAOlB,OAAO,CAACC,MAAM,CAACY,GAAG,CAAC;IAC9B;EACJ;EACA,OAAOb,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAeZ,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}